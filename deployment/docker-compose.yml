version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: mythic-warriors-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: mythic-warriors
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - mythic-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: mythic-warriors-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mythic-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Hardhat Node (Local Blockchain)
  hardhat:
    image: node:18-alpine
    container_name: mythic-warriors-hardhat
    restart: unless-stopped
    working_dir: /app/contracts
    volumes:
      - ../contracts:/app/contracts
    ports:
      - "8545:8545"
    command: npx hardhat node
    networks:
      - mythic-network
    environment:
      NODE_ENV: development

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: mythic-warriors-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://admin:password@mongodb:27017/mythic-warriors?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_change_this}
      JWT_EXPIRE: 7d
      CLIENT_URL: http://localhost:3000
      ETHEREUM_RPC_URL: http://hardhat:8545
      ETHEREUM_CHAIN_ID: 31337
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      hardhat:
        condition: service_started
    volumes:
      - ../backend/src:/app/src
      - ../backend/logs:/app/logs
    networks:
      - mythic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: mythic-warriors-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_WS_URL: ws://localhost:5000
      REACT_APP_CHAIN_ID: 31337
      REACT_APP_RPC_URL: http://localhost:8545
    depends_on:
      - backend
    networks:
      - mythic-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: mythic-warriors-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - mythic-network
    depends_on:
      - backend

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: mythic-warriors-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - mythic-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mythic-warriors-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - mythic-network

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mythic-network:
    driver: bridge